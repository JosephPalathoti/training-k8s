Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows

PS C:\Users\vijay> ssh sfjbs@20.244.35.190
The authenticity of host '20.244.35.190 (20.244.35.190)' can't be established.
ED25519 key fingerprint is SHA256:SBkrK1b9CvKkCedOrtmtZLH92Aio1cun0KKcZXP09Mw.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '20.244.35.190' (ED25519) to the list of known hosts.
sfjbs@20.244.35.190's password:
Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.15.0-1022-azure x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Mon Oct 31 05:47:19 UTC 2022

  System load:  0.0                Processes:              129
  Usage of /:   11.3% of 28.89GB   Users logged in:        1
  Memory usage: 6%                 IPv4 address for eth0:  10.0.0.4
  Swap usage:   0%                 IPv4 address for weave: 10.32.0.1

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

22 updates can be applied immediately.
11 of these updates are standard security updates.
To see these additional updates run: apt list --upgradable

New release '22.04.1 LTS' available.
Run 'do-release-upgrade' to upgrade to it.


Last login: Mon Oct 31 03:27:56 2022 from 103.149.126.203
sfjbs@vm001:~$
sfjbs@vm001:~$
sfjbs@vm001:~$
sfjbs@vm001:~$
sfjbs@vm001:~$
sfjbs@vm001:~$ docker

Command 'docker' not found, but can be installed with:

sudo snap install docker     # version 20.10.17, or
sudo apt  install docker.io  # version 20.10.12-0ubuntu2~20.04.1

See 'snap info docker' for additional versions.

sfjbs@vm001:~$
sfjbs@vm001:~$ curl -fsSL https://get.docker.com -o get-docker.sh
sfjbs@vm001:~$ ls
components.yaml  get-docker.sh
sfjbs@vm001:~$ cat get-docker.sh
#!/bin/sh
set -e
# Docker CE for Linux installation script
#
# See https://docs.docker.com/engine/install/ for the installation steps.
#
# This script is meant for quick & easy install via:
#   $ curl -fsSL https://get.docker.com -o get-docker.sh
#   $ sh get-docker.sh
#
# For test builds (ie. release candidates):
#   $ curl -fsSL https://test.docker.com -o test-docker.sh
#   $ sh test-docker.sh
#
# NOTE: Make sure to verify the contents of the script
#       you downloaded matches the contents of install.sh
#       located at https://github.com/docker/docker-install
#       before executing.
#
# Git commit from https://github.com/docker/docker-install when
# the script was uploaded (Should only be modified by upload job):
SCRIPT_COMMIT_SHA="4f282167c425347a931ccfd95cc91fab041d414f"

# strip "v" prefix if present
VERSION="${VERSION#v}"

# The channel to install from:
#   * nightly
#   * test
#   * stable
#   * edge (deprecated)
DEFAULT_CHANNEL_VALUE="stable"
if [ -z "$CHANNEL" ]; then
        CHANNEL=$DEFAULT_CHANNEL_VALUE
fi

DEFAULT_DOWNLOAD_URL="https://download.docker.com"
if [ -z "$DOWNLOAD_URL" ]; then
        DOWNLOAD_URL=$DEFAULT_DOWNLOAD_URL
fi

DEFAULT_REPO_FILE="docker-ce.repo"
if [ -z "$REPO_FILE" ]; then
        REPO_FILE="$DEFAULT_REPO_FILE"
fi

mirror=''
DRY_RUN=${DRY_RUN:-}
while [ $# -gt 0 ]; do
        case "$1" in
                --mirror)
                        mirror="$2"
                        shift
                        ;;
                --dry-run)
                        DRY_RUN=1
                        ;;
                --*)
                        echo "Illegal option $1"
                        ;;
        esac
        shift $(( $# > 0 ? 1 : 0 ))
done

case "$mirror" in
        Aliyun)
                DOWNLOAD_URL="https://mirrors.aliyun.com/docker-ce"
                ;;
        AzureChinaCloud)
                DOWNLOAD_URL="https://mirror.azure.cn/docker-ce"
                ;;
esac

command_exists() {
        command -v "$@" > /dev/null 2>&1
}

# version_gte checks if the version specified in $VERSION is at least
# the given CalVer (YY.MM) version. returns 0 (success) if $VERSION is either
# unset (=latest) or newer or equal than the specified version. Returns 1 (fail)
# otherwise.
#
# examples:
#
# VERSION=20.10
# version_gte 20.10 // 0 (success)
# version_gte 19.03 // 0 (success)
# version_gte 21.10 // 1 (fail)
version_gte() {
        if [ -z "$VERSION" ]; then
                        return 0
        fi
        eval calver_compare "$VERSION" "$1"
}

# calver_compare compares two CalVer (YY.MM) version strings. returns 0 (success)
# if version A is newer or equal than version B, or 1 (fail) otherwise. Patch
# releases and pre-release (-alpha/-beta) are not taken into account
#
# examples:
#
# calver_compare 20.10 19.03 // 0 (success)
# calver_compare 20.10 20.10 // 0 (success)
# calver_compare 19.03 20.10 // 1 (fail)
calver_compare() (
        set +x

        yy_a="$(echo "$1" | cut -d'.' -f1)"
        yy_b="$(echo "$2" | cut -d'.' -f1)"
        if [ "$yy_a" -lt "$yy_b" ]; then
                return 1
        fi
        if [ "$yy_a" -gt "$yy_b" ]; then
                return 0
        fi
        mm_a="$(echo "$1" | cut -d'.' -f2)"
        mm_b="$(echo "$2" | cut -d'.' -f2)"
        if [ "${mm_a#0}" -lt "${mm_b#0}" ]; then
                return 1
        fi

        return 0
)

is_dry_run() {
        if [ -z "$DRY_RUN" ]; then
                return 1
        else
                return 0
        fi
}

is_wsl() {
        case "$(uname -r)" in
        *microsoft* ) true ;; # WSL 2
        *Microsoft* ) true ;; # WSL 1
        * ) false;;
        esac
}

is_darwin() {
        case "$(uname -s)" in
        *darwin* ) true ;;
        *Darwin* ) true ;;
        * ) false;;
        esac
}

deprecation_notice() {
        distro=$1
        distro_version=$2
        echo
        printf "\033[91;1mDEPRECATION WARNING\033[0m\n"
        printf "    This Linux distribution (\033[1m%s %s\033[0m) reached end-of-life and is no longer supported by this script.\n" "$distro" "$distro_version"
        echo   "    No updates or security fixes will be released for this distribution, and users are recommended"
        echo   "    to upgrade to a currently maintained version of $distro."
        echo
        printf   "Press \033[1mCtrl+C\033[0m now to abort this script, or wait for the installation to continue."
        echo
        sleep 10
}

get_distribution() {
        lsb_dist=""
        # Every system that we officially support has /etc/os-release
        if [ -r /etc/os-release ]; then
                lsb_dist="$(. /etc/os-release && echo "$ID")"
        fi
        # Returning an empty string here should be alright since the
        # case statements don't act unless you provide an actual value
        echo "$lsb_dist"
}

echo_docker_as_nonroot() {
        if is_dry_run; then
                return
        fi
        if command_exists docker && [ -e /var/run/docker.sock ]; then
                (
                        set -x
                        $sh_c 'docker version'
                ) || true
        fi

        # intentionally mixed spaces and tabs here -- tabs are stripped by "<<-EOF", spaces are kept in the output
        echo
        echo "================================================================================"
        echo
        if version_gte "20.10"; then
                echo "To run Docker as a non-privileged user, consider setting up the"
                echo "Docker daemon in rootless mode for your user:"
                echo
                echo "    dockerd-rootless-setuptool.sh install"
                echo
                echo "Visit https://docs.docker.com/go/rootless/ to learn about rootless mode."
                echo
        fi
        echo
        echo "To run the Docker daemon as a fully privileged service, but granting non-root"
        echo "users access, refer to https://docs.docker.com/go/daemon-access/"
        echo
        echo "WARNING: Access to the remote API on a privileged Docker daemon is equivalent"
        echo "         to root access on the host. Refer to the 'Docker daemon attack surface'"
        echo "         documentation for details: https://docs.docker.com/go/attack-surface/"
        echo
        echo "================================================================================"
        echo
}

# Check if this is a forked Linux distro
check_forked() {

        # Check for lsb_release command existence, it usually exists in forked distros
        if command_exists lsb_release; then
                # Check if the `-u` option is supported
                set +e
                lsb_release -a -u > /dev/null 2>&1
                lsb_release_exit_code=$?
                set -e

                # Check if the command has exited successfully, it means we're in a forked distro
                if [ "$lsb_release_exit_code" = "0" ]; then
                        # Print info about current distro
                        cat <<-EOF
                        You're using '$lsb_dist' version '$dist_version'.
                        EOF

                        # Get the upstream release info
                        lsb_dist=$(lsb_release -a -u 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'id' | cut -d ':' -f 2 | tr-d '[:space:]')
                        dist_version=$(lsb_release -a -u 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'codename' | cut -d ':'-f 2 | tr -d '[:space:]')

                        # Print info about upstream distro
                        cat <<-EOF
                        Upstream release is '$lsb_dist' version '$dist_version'.
                        EOF
                else
                        if [ -r /etc/debian_version ] && [ "$lsb_dist" != "ubuntu" ] && [ "$lsb_dist" != "raspbian" ]; then
                                if [ "$lsb_dist" = "osmc" ]; then
                                        # OSMC runs Raspbian
                                        lsb_dist=raspbian
                                else
                                        # We're Debian and don't even know it!
                                        lsb_dist=debian
                                fi
                                dist_version="$(sed 's/\/.*//' /etc/debian_version | sed 's/\..*//')"
                                case "$dist_version" in
                                        11)
                                                dist_version="bullseye"
                                        ;;
                                        10)
                                                dist_version="buster"
                                        ;;
                                        9)
                                                dist_version="stretch"
                                        ;;
                                        8)
                                                dist_version="jessie"
                                        ;;
                                esac
                        fi
                fi
        fi
}

do_install() {
        echo "# Executing docker install script, commit: $SCRIPT_COMMIT_SHA"

        if command_exists docker; then
                cat >&2 <<-'EOF'
                        Warning: the "docker" command appears to already exist on this system.

                        If you already have Docker installed, this script can cause trouble, which is
                        why we're displaying this warning and provide the opportunity to cancel the
                        installation.

                        If you installed the current Docker package using this script and are using it
                        again to update Docker, you can safely ignore this message.

                        You may press Ctrl+C now to abort this script.
                EOF
                ( set -x; sleep 20 )
        fi

        user="$(id -un 2>/dev/null || true)"

        sh_c='sh -c'
        if [ "$user" != 'root' ]; then
                if command_exists sudo; then
                        sh_c='sudo -E sh -c'
                elif command_exists su; then
                        sh_c='su -c'
                else
                        cat >&2 <<-'EOF'
                        Error: this installer needs the ability to run commands as root.
                        We are unable to find either "sudo" or "su" available to make this happen.
                        EOF
                        exit 1
                fi
        fi

        if is_dry_run; then
                sh_c="echo"
        fi

        # perform some very rudimentary platform detection
        lsb_dist=$( get_distribution )
        lsb_dist="$(echo "$lsb_dist" | tr '[:upper:]' '[:lower:]')"

        if is_wsl; then
                echo
                echo "WSL DETECTED: We recommend using Docker Desktop for Windows."
                echo "Please get Docker Desktop from https://www.docker.com/products/docker-desktop"
                echo
                cat >&2 <<-'EOF'

                        You may press Ctrl+C now to abort this script.
                EOF
                ( set -x; sleep 20 )
        fi

        case "$lsb_dist" in

                ubuntu)
                        if command_exists lsb_release; then
                                dist_version="$(lsb_release --codename | cut -f2)"
                        fi
                        if [ -z "$dist_version" ] && [ -r /etc/lsb-release ]; then
                                dist_version="$(. /etc/lsb-release && echo "$DISTRIB_CODENAME")"
                        fi
                ;;

                debian|raspbian)
                        dist_version="$(sed 's/\/.*//' /etc/debian_version | sed 's/\..*//')"
                        case "$dist_version" in
                                11)
                                        dist_version="bullseye"
                                ;;
                                10)
                                        dist_version="buster"
                                ;;
                                9)
                                        dist_version="stretch"
                                ;;
                                8)
                                        dist_version="jessie"
                                ;;
                        esac
                ;;

                centos|rhel|sles)
                        if [ -z "$dist_version" ] && [ -r /etc/os-release ]; then
                                dist_version="$(. /etc/os-release && echo "$VERSION_ID")"
                        fi
                ;;

                *)
                        if command_exists lsb_release; then
                                dist_version="$(lsb_release --release | cut -f2)"
                        fi
                        if [ -z "$dist_version" ] && [ -r /etc/os-release ]; then
                                dist_version="$(. /etc/os-release && echo "$VERSION_ID")"
                        fi
                ;;

        esac

        # Check if this is a forked Linux distro
        check_forked

        # Print deprecation warnings for distro versions that recently reached EOL,
        # but may still be commonly used (especially LTS versions).
        case "$lsb_dist.$dist_version" in
                debian.stretch|debian.jessie)
                        deprecation_notice "$lsb_dist" "$dist_version"
                        ;;
                raspbian.stretch|raspbian.jessie)
                        deprecation_notice "$lsb_dist" "$dist_version"
                        ;;
                ubuntu.xenial|ubuntu.trusty)
                        deprecation_notice "$lsb_dist" "$dist_version"
                        ;;
                fedora.*)
                        if [ "$dist_version" -lt 33 ]; then
                                deprecation_notice "$lsb_dist" "$dist_version"
                        fi
                        ;;
        esac

        # Run setup for each distro accordingly
        case "$lsb_dist" in
                ubuntu|debian|raspbian)
                        pre_reqs="apt-transport-https ca-certificates curl"
                        if ! command -v gpg > /dev/null; then
                                pre_reqs="$pre_reqs gnupg"
                        fi
                        apt_repo="deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] $DOWNLOAD_URL/linux/$lsb_dist $dist_version $CHANNEL"
                        (
                                if ! is_dry_run; then
                                        set -x
                                fi
                                $sh_c 'apt-get update -qq >/dev/null'
                                $sh_c "DEBIAN_FRONTEND=noninteractive apt-get install -y -qq $pre_reqs >/dev/null"
                                $sh_c 'mkdir -p /etc/apt/keyrings && chmod -R 0755 /etc/apt/keyrings'
                                $sh_c "curl -fsSL \"$DOWNLOAD_URL/linux/$lsb_dist/gpg\" | gpg --dearmor --yes -o /etc/apt/keyrings/docker.gpg"
                                $sh_c "chmod a+r /etc/apt/keyrings/docker.gpg"
                                $sh_c "echo \"$apt_repo\" > /etc/apt/sources.list.d/docker.list"
                                $sh_c 'apt-get update -qq >/dev/null'
                        )
                        pkg_version=""
                        if [ -n "$VERSION" ]; then
                                if is_dry_run; then
                                        echo "# WARNING: VERSION pinning is not supported in DRY_RUN"
                                else
                                        # Will work for incomplete versions IE (17.12), but may not actually grab the "latest" if in the test channel
                                        pkg_pattern="$(echo "$VERSION" | sed "s/-ce-/~ce~.*/g" | sed "s/-/.*/g").*-0~$lsb_dist"
                                        search_command="apt-cache madison 'docker-ce' | grep '$pkg_pattern' | head -1 | awk '{\$1=\$1};1' | cut -d' ' -f 3"
                                        pkg_version="$($sh_c "$search_command")"
                                        echo "INFO: Searching repository for VERSION '$VERSION'"
                                        echo "INFO: $search_command"
                                        if [ -z "$pkg_version" ]; then
                                                echo
                                                echo "ERROR: '$VERSION' not found amongst apt-cache madison results"
                                                echo
                                                exit 1
                                        fi
                                        if version_gte "18.09"; then
                                                        search_command="apt-cache madison 'docker-ce-cli' | grep '$pkg_pattern' | head -1 | awk '{\$1=\$1};1' | cut -d' ' -f 3"
                                                        echo "INFO: $search_command"
                                                        cli_pkg_version="=$($sh_c "$search_command")"
                                        fi
                                        pkg_version="=$pkg_version"
                                fi
                        fi
                        (
                                pkgs="docker-ce${pkg_version%=}"
                                if version_gte "18.09"; then
                                                # older versions didn't ship the cli and containerd as separate packages                                           pkgs="$pkgs docker-ce-cli${cli_pkg_version%=} containerd.io"
                                fi
                                if version_gte "20.10"; then
                                                pkgs="$pkgs docker-compose-plugin"
                                fi
                                if version_gte "20.10" && [ "$(uname -m)" = "x86_64" ]; then
                                                # also install the latest version of the "docker scan" cli-plugin (only supported on x86 currently)
                                                pkgs="$pkgs docker-scan-plugin"
                                fi
                                # TODO(thaJeztah) remove the $CHANNEL check once 22.06 and docker-buildx-plugin is publishedto the "stable" channel
                                if [ "$CHANNEL" = "test" ] && version_gte "22.06"; then
                                                pkgs="$pkgs docker-buildx-plugin"
                                fi
                                if ! is_dry_run; then
                                        set -x
                                fi
                                $sh_c "DEBIAN_FRONTEND=noninteractive apt-get install -y -qq --no-install-recommends $pkgs >/dev/null"
                                if version_gte "20.10"; then
                                        # Install docker-ce-rootless-extras without "--no-install-recommends", so as to install slirp4netns when available
                                        $sh_c "DEBIAN_FRONTEND=noninteractive apt-get install -y -qq docker-ce-rootless-extras${pkg_version%=} >/dev/null"
                                fi
                        )
                        echo_docker_as_nonroot
                        exit 0
                        ;;
                centos|fedora|rhel)
                        if [ "$(uname -m)" != "s390x" ] && [ "$lsb_dist" = "rhel" ]; then
                                echo "Packages for RHEL are currently only available for s390x."
                                exit 1
                        fi
                        if [ "$lsb_dist" = "fedora" ]; then
                                pkg_manager="dnf"
                                config_manager="dnf config-manager"
                                enable_channel_flag="--set-enabled"
                                disable_channel_flag="--set-disabled"
                                pre_reqs="dnf-plugins-core"
                                pkg_suffix="fc$dist_version"
                        else
                                pkg_manager="yum"
                                config_manager="yum-config-manager"
                                enable_channel_flag="--enable"
                                disable_channel_flag="--disable"
                                pre_reqs="yum-utils"
                                pkg_suffix="el"
                        fi
                        repo_file_url="$DOWNLOAD_URL/linux/$lsb_dist/$REPO_FILE"
                        (
                                if ! is_dry_run; then
                                        set -x
                                fi
                                $sh_c "$pkg_manager install -y -q $pre_reqs"
                                $sh_c "$config_manager --add-repo $repo_file_url"

                                if [ "$CHANNEL" != "stable" ]; then
                                        $sh_c "$config_manager $disable_channel_flag docker-ce-*"
                                        $sh_c "$config_manager $enable_channel_flag docker-ce-$CHANNEL"
                                fi
                                $sh_c "$pkg_manager makecache"
                        )
                        pkg_version=""
                        if [ -n "$VERSION" ]; then
                                if is_dry_run; then
                                        echo "# WARNING: VERSION pinning is not supported in DRY_RUN"
                                else
                                        pkg_pattern="$(echo "$VERSION" | sed "s/-ce-/\\\\.ce.*/g" | sed "s/-/.*/g").*$pkg_suffix"
                                        search_command="$pkg_manager list --showduplicates 'docker-ce' | grep '$pkg_pattern'| tail -1 | awk '{print \$2}'"
                                        pkg_version="$($sh_c "$search_command")"
                                        echo "INFO: Searching repository for VERSION '$VERSION'"
                                        echo "INFO: $search_command"
                                        if [ -z "$pkg_version" ]; then
                                                echo
                                                echo "ERROR: '$VERSION' not found amongst $pkg_manager list results"
                                                echo
                                                exit 1
                                        fi
                                        if version_gte "18.09"; then
                                                # older versions don't support a cli package
                                                search_command="$pkg_manager list --showduplicates 'docker-ce-cli' | grep '$pkg_pattern' | tail -1 | awk '{print \$2}'"
                                                cli_pkg_version="$($sh_c "$search_command" | cut -d':' -f 2)"
                                        fi
                                        # Cut out the epoch and prefix with a '-'
                                        pkg_version="-$(echo "$pkg_version" | cut -d':' -f 2)"
                                fi
                        fi
                        (
                                pkgs="docker-ce$pkg_version"
                                if version_gte "18.09"; then
                                        # older versions didn't ship the cli and containerd as separate packages
                                        if [ -n "$cli_pkg_version" ]; then
                                                pkgs="$pkgs docker-ce-cli-$cli_pkg_version containerd.io"
                                        else
                                                pkgs="$pkgs docker-ce-cli containerd.io"
                                        fi
                                fi
                                if version_gte "20.10" && [ "$(uname -m)" = "x86_64" ]; then
                                                # also install the latest version of the "docker scan" cli-plugin (only supported on x86 currently)
                                                pkgs="$pkgs docker-scan-plugin"
                                fi
                                if version_gte "20.10"; then
                                        pkgs="$pkgs docker-compose-plugin docker-ce-rootless-extras$pkg_version"
                                fi
                                # TODO(thaJeztah) remove the $CHANNEL check once 22.06 and docker-buildx-plugin is publishedto the "stable" channel
                                if [ "$CHANNEL" = "test" ] && version_gte "22.06"; then
                                                pkgs="$pkgs docker-buildx-plugin"
                                fi
                                if ! is_dry_run; then
                                        set -x
                                fi
                                $sh_c "$pkg_manager install -y -q $pkgs"
                        )
                        echo_docker_as_nonroot
                        exit 0
                        ;;
                sles)
                        if [ "$(uname -m)" != "s390x" ]; then
                                echo "Packages for SLES are currently only available for s390x"
                                exit 1
                        fi
                        if [ "$dist_version" = "15.3" ]; then
                                sles_version="SLE_15_SP3"
                        else
                                sles_minor_version="${dist_version##*.}"
                                sles_version="15.$sles_minor_version"
                        fi
                        opensuse_repo="https://download.opensuse.org/repositories/security:SELinux/$sles_version/security:SELinux.repo"
                        repo_file_url="$DOWNLOAD_URL/linux/$lsb_dist/$REPO_FILE"
                        pre_reqs="ca-certificates curl libseccomp2 awk"
                        (
                                if ! is_dry_run; then
                                        set -x
                                fi
                                $sh_c "zypper install -y $pre_reqs"
                                $sh_c "zypper addrepo $repo_file_url"
                                if ! is_dry_run; then
                                                cat >&2 <<-'EOF'
                                                WARNING!!
                                                openSUSE repository (https://download.opensuse.org/repositories/security:SELinux) will be enabled now.
                                                Do you wish to continue?
                                                You may press Ctrl+C now to abort this script.
                                                EOF
                                                ( set -x; sleep 30 )
                                fi
                                $sh_c "zypper addrepo $opensuse_repo"
                                $sh_c "zypper --gpg-auto-import-keys refresh"
                                $sh_c "zypper lr -d"
                        )
                        pkg_version=""
                        if [ -n "$VERSION" ]; then
                                if is_dry_run; then
                                        echo "# WARNING: VERSION pinning is not supported in DRY_RUN"
                                else
                                        pkg_pattern="$(echo "$VERSION" | sed "s/-ce-/\\\\.ce.*/g" | sed "s/-/.*/g")"
                                        search_command="zypper search -s --match-exact 'docker-ce' | grep '$pkg_pattern' | tail -1 | awk '{print \$6}'"
                                        pkg_version="$($sh_c "$search_command")"
                                        echo "INFO: Searching repository for VERSION '$VERSION'"
                                        echo "INFO: $search_command"
                                        if [ -z "$pkg_version" ]; then
                                                echo
                                                echo "ERROR: '$VERSION' not found amongst zypper list results"
                                                echo
                                                exit 1
                                        fi
                                        search_command="zypper search -s --match-exact 'docker-ce-cli' | grep '$pkg_pattern'| tail -1 | awk '{print \$6}'"
                                        # It's okay for cli_pkg_version to be blank, since older versions don't support a cli package
                                        cli_pkg_version="$($sh_c "$search_command")"
                                        pkg_version="-$pkg_version"

                                        search_command="zypper search -s --match-exact 'docker-ce-rootless-extras' | grep '$pkg_pattern' | tail -1 | awk '{print \$6}'"
                                        rootless_pkg_version="$($sh_c "$search_command")"
                                        rootless_pkg_version="-$rootless_pkg_version"
                                fi
                        fi
                        (
                                pkgs="docker-ce$pkg_version"
                                if version_gte "18.09"; then
                                        if [ -n "$cli_pkg_version" ]; then
                                                # older versions didn't ship the cli and containerd as separate packages                                           pkgs="$pkgs docker-ce-cli-$cli_pkg_version containerd.io"
                                        else
                                                pkgs="$pkgs docker-ce-cli containerd.io"
                                        fi
                                fi
                                if version_gte "20.10"; then
                                        pkgs="$pkgs docker-compose-plugin docker-ce-rootless-extras$pkg_version"
                                fi
                                # TODO(thaJeztah) remove the $CHANNEL check once 22.06 and docker-buildx-plugin is publishedto the "stable" channel
                                if [ "$CHANNEL" = "test" ] && version_gte "22.06"; then
                                                pkgs="$pkgs docker-buildx-plugin"
                                fi
                                if ! is_dry_run; then
                                        set -x
                                fi
                                $sh_c "zypper -q install -y $pkgs"
                        )
                        echo_docker_as_nonroot
                        exit 0
                        ;;
                *)
                        if [ -z "$lsb_dist" ]; then
                                if is_darwin; then
                                        echo
                                        echo "ERROR: Unsupported operating system 'macOS'"
                                        echo "Please get Docker Desktop from https://www.docker.com/products/docker-desktop"
                                        echo
                                        exit 1
                                fi
                        fi
                        echo
                        echo "ERROR: Unsupported distribution '$lsb_dist'"
                        echo
                        exit 1
                        ;;
        esac
        exit 1
}

# wrapped up in a function so that we have some protection against only getting
# half the file during "curl | sh"
do_install
sfjbs@vm001:~$ ls
components.yaml  get-docker.sh
sfjbs@vm001:~$ sudo bash get-docker.sh
# Executing docker install script, commit: 4f282167c425347a931ccfd95cc91fab041d414f
+ sh -c 'apt-get update -qq >/dev/null'
+ sh -c 'DEBIAN_FRONTEND=noninteractive apt-get install -y -qq apt-transport-https ca-certificates curl >/dev/null'
+ sh -c 'mkdir -p /etc/apt/keyrings && chmod -R 0755 /etc/apt/keyrings'
+ sh -c 'curl -fsSL "https://download.docker.com/linux/ubuntu/gpg" | gpg --dearmor --yes -o /etc/apt/keyrings/docker.gpg'
+ sh -c 'chmod a+r /etc/apt/keyrings/docker.gpg'
+ sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu focal stable" > /etc/apt/sources.list.d/docker.list'
+ sh -c 'apt-get update -qq >/dev/null'
+ sh -c 'DEBIAN_FRONTEND=noninteractive apt-get install -y -qq --no-install-recommends docker-ce docker-ce-cli containerd.iodocker-compose-plugin docker-scan-plugin >/dev/null'
+ version_gte 20.10
+ '[' -z '' ']'
+ return 0
+ sh -c 'DEBIAN_FRONTEND=noninteractive apt-get install -y -qq docker-ce-rootless-extras >/dev/null'
+ sh -c 'docker version'
Client: Docker Engine - Community
 Version:           20.10.21
 API version:       1.41
 Go version:        go1.18.7
 Git commit:        baeda1f
 Built:             Tue Oct 25 18:02:21 2022
 OS/Arch:           linux/amd64
 Context:           default
 Experimental:      true

Server: Docker Engine - Community
 Engine:
  Version:          20.10.21
  API version:      1.41 (minimum version 1.12)
  Go version:       go1.18.7
  Git commit:       3056208
  Built:            Tue Oct 25 18:00:04 2022
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.6.9
  GitCommit:        1c90a442489720eec95342e1789ee8a5e1b9536f
 runc:
  Version:          1.1.4
  GitCommit:        v1.1.4-0-g5fd4c4d
 docker-init:
  Version:          0.19.0
  GitCommit:        de40ad0

================================================================================

To run Docker as a non-privileged user, consider setting up the
Docker daemon in rootless mode for your user:

    dockerd-rootless-setuptool.sh install

Visit https://docs.docker.com/go/rootless/ to learn about rootless mode.


To run the Docker daemon as a fully privileged service, but granting non-root
users access, refer to https://docs.docker.com/go/daemon-access/

WARNING: Access to the remote API on a privileged Docker daemon is equivalent
         to root access on the host. Refer to the 'Docker daemon attack surface'
         documentation for details: https://docs.docker.com/go/attack-surface/

================================================================================

sfjbs@vm001:~$ ls
components.yaml  get-docker.sh
sfjbs@vm001:~$ id
uid=1000(sfjbs) gid=1000(sfjbs) groups=1000(sfjbs),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),118(lxd)
sfjbs@vm001:~$
sfjbs@vm001:~$ id
uid=1000(sfjbs) gid=1000(sfjbs) groups=1000(sfjbs),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),118(lxd)
sfjbs@vm001:~$ id -n
id: cannot print only names or real IDs in default format
sfjbs@vm001:~$ id -s
id: invalid option -- 's'
Try 'id --help' for more information.
sfjbs@vm001:~$ id
uid=1000(sfjbs) gid=1000(sfjbs) groups=1000(sfjbs),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),118(lxd)
sfjbs@vm001:~$ docker ps
Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get "http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json": dial unix /var/run/docker.sock: connect: permission denied
sfjbs@vm001:~$ sudo usermod -aG docker sfjbs
sfjbs@vm001:~$ id
uid=1000(sfjbs) gid=1000(sfjbs) groups=1000(sfjbs),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),118(lxd)
sfjbs@vm001:~$ logout
Connection to 20.244.35.190 closed.
PS C:\Users\vijay> ssh sfjbs@20.244.35.190
sfjbs@20.244.35.190's password:
Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.15.0-1022-azure x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Mon Oct 31 06:16:18 UTC 2022

  System load:  0.0                Users logged in:          1
  Usage of /:   12.5% of 28.89GB   IPv4 address for docker0: 172.17.0.1
  Memory usage: 6%                 IPv4 address for eth0:    10.0.0.4
  Swap usage:   0%                 IPv4 address for weave:   10.32.0.1
  Processes:    132

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

20 updates can be applied immediately.
9 of these updates are standard security updates.
To see these additional updates run: apt list --upgradable

New release '22.04.1 LTS' available.
Run 'do-release-upgrade' to upgrade to it.


Last login: Mon Oct 31 06:03:17 2022 from 103.149.126.203
sfjbs@vm001:~$ ps -ef | grep docker
root       43803       1  0 05:52 ?        00:00:00 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
sfjbs      45328   45318  0 06:16 pts/1    00:00:00 grep --color=auto docker
sfjbs@vm001:~$ id
uid=1000(sfjbs) gid=1000(sfjbs) groups=1000(sfjbs),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),118(lxd),998(docker)
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
sfjbs@vm001:~$ docker pull nginx:1.23.2-alpine
1.23.2-alpine: Pulling from library/nginx
213ec9aee27d: Pull complete
ae98275d0ecb: Pull complete
121e2d9f6af2: Pull complete
6a07d505af0f: Pull complete
3e8957b70867: Pull complete
2806408d582e: Pull complete
Digest: sha256:2452715dd322b3273419652b7721b64aa60305f606ef7a674ae28b6f12d155a3
Status: Downloaded newer image for nginx:1.23.2-alpine
docker.io/library/nginx:1.23.2-alpine
sfjbs@vm001:~$ docker images
REPOSITORY   TAG             IMAGE ID       CREATED       SIZE
nginx        1.23.2-alpine   b997307a58ab   11 days ago   23.6MB
sfjbs@vm001:~$ docker pull nginx
Using default tag: latest
latest: Pulling from library/nginx
e9995326b091: Pull complete
71689475aec2: Pull complete
f88a23025338: Pull complete
0df440342e26: Pull complete
eef26ceb3309: Pull complete
8e3ed6a9e43a: Pull complete
Digest: sha256:943c25b4b66b332184d5ba6bb18234273551593016c0e0ae906bab111548239f
Status: Downloaded newer image for nginx:latest
docker.io/library/nginx:latest
sfjbs@vm001:~$ docker images
REPOSITORY   TAG             IMAGE ID       CREATED       SIZE
nginx        latest          76c69feac34e   5 days ago    142MB
nginx        1.23.2-alpine   b997307a58ab   11 days ago   23.6MB
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
sfjbs@vm001:~$ docker images
REPOSITORY   TAG             IMAGE ID       CREATED       SIZE
nginx        latest          76c69feac34e   5 days ago    142MB
nginx        1.23.2-alpine   b997307a58ab   11 days ago   23.6MB
sfjbs@vm001:~$ docker rmi 76c69feac34e
Untagged: nginx:latest
Untagged: nginx@sha256:943c25b4b66b332184d5ba6bb18234273551593016c0e0ae906bab111548239f
Deleted: sha256:76c69feac34e85768b284f84416c3546b240e8cb4f68acbbe5ad261a8b36f39f
Deleted: sha256:8b811a30cb94c227fb2ae61a2a1ec1e93381dbef06f9ea6b5c06df4f27651fed
Deleted: sha256:470cc6f5d954afeb2695504eff0eda9f8da0e1b3b8bde30e74d9c48dbcb99906
Deleted: sha256:1c277c746c47ba650267f58cc6e1ea430ce726065c79691ce04235d90209caff
Deleted: sha256:953e18d40076df9e65564241b34cfba85ab1a6c0634c67e92d6a1f633c5b97d9
Deleted: sha256:f0a780360f49b2b6afc28882ed2399799e6615862e7dc64451fb3688a33fe712
Deleted: sha256:a12586ed027fafddcddcc63b31671f406c25e43342479fc92a330e7e30d65f2e
sfjbs@vm001:~$ docker images
REPOSITORY   TAG             IMAGE ID       CREATED       SIZE
nginx        1.23.2-alpine   b997307a58ab   11 days ago   23.6MB
sfjbs@vm001:~$ docker pull nginx
Using default tag: latest
latest: Pulling from library/nginx
e9995326b091: Pull complete
71689475aec2: Pull complete
f88a23025338: Pull complete
0df440342e26: Pull complete
eef26ceb3309: Pull complete
8e3ed6a9e43a: Pull complete
Digest: sha256:943c25b4b66b332184d5ba6bb18234273551593016c0e0ae906bab111548239f
Status: Downloaded newer image for nginx:latest
docker.io/library/nginx:latest
sfjbs@vm001:~$ docker images
REPOSITORY   TAG             IMAGE ID       CREATED       SIZE
nginx        latest          76c69feac34e   5 days ago    142MB
nginx        1.23.2-alpine   b997307a58ab   11 days ago   23.6MB
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
sfjbs@vm001:~$ docker run -it nginx:1.23.2-alpine
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
/docker-entrypoint.sh: Configuration complete; ready for start up
2022/10/31 06:46:53 [notice] 1#1: using the "epoll" event method
2022/10/31 06:46:53 [notice] 1#1: nginx/1.23.2
2022/10/31 06:46:53 [notice] 1#1: built by gcc 11.2.1 20220219 (Alpine 11.2.1_git20220219)
2022/10/31 06:46:53 [notice] 1#1: OS: Linux 5.15.0-1022-azure
2022/10/31 06:46:53 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
2022/10/31 06:46:53 [notice] 1#1: start worker processes
2022/10/31 06:46:53 [notice] 1#1: start worker process 31
2022/10/31 06:46:53 [notice] 1#1: start worker process 32
^C2022/10/31 06:47:05 [notice] 1#1: signal 2 (SIGINT) received, exiting
2022/10/31 06:47:05 [notice] 31#31: signal 2 (SIGINT) received, exiting
2022/10/31 06:47:05 [notice] 31#31: exiting
2022/10/31 06:47:05 [notice] 32#32: signal 2 (SIGINT) received, exiting
2022/10/31 06:47:05 [notice] 32#32: exiting
2022/10/31 06:47:05 [notice] 32#32: exit
2022/10/31 06:47:05 [notice] 31#31: exit
2022/10/31 06:47:05 [notice] 1#1: signal 17 (SIGCHLD) received from 32
2022/10/31 06:47:05 [notice] 1#1: worker process 31 exited with code 0
2022/10/31 06:47:05 [notice] 1#1: worker process 32 exited with code 0
2022/10/31 06:47:05 [notice] 1#1: exit
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
sfjbs@vm001:~$ docker ps -a
CONTAINER ID   IMAGE                 COMMAND                  CREATED              STATUS                          PORTSNAMES
84cc8a8f25e1   nginx:1.23.2-alpine   "/docker-entrypoint.…"   About a minute ago   Exited (0) About a minute ago
bold_lovelace
sfjbs@vm001:~$ docker start 84cc8a8f25e1
84cc8a8f25e1
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS     NAMES
84cc8a8f25e1   nginx:1.23.2-alpine   "/docker-entrypoint.…"   2 minutes ago   Up 9 seconds   80/tcp    bold_lovelace
sfjbs@vm001:~$ docker run -d nginx:1.23.2-alpine
02094f5c560b6ddf609d633b59ae1a1a46e28a07534a9bffa82982258059064d
sfjbs@vm001:~$ docker s
docker: 's' is not a docker command.
See 'docker --help'
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS     NAMES
02094f5c560b   nginx:1.23.2-alpine   "/docker-entrypoint.…"   9 seconds ago   Up 8 seconds   80/tcp    crazy_brahmagupta
84cc8a8f25e1   nginx:1.23.2-alpine   "/docker-entrypoint.…"   5 minutes ago   Up 2 minutes   80/tcp    bold_lovelace
sfjbs@vm001:~$ docker exec -it 84cc8a8f25e1 sh
/ # ls
bin                   etc                   mnt                   run                   tmp
dev                   home                  opt                   sbin                  usr
docker-entrypoint.d   lib                   proc                  srv                   var
docker-entrypoint.sh  media                 root                  sys
/ # cd /etc
/etc # ls
alpine-release        hostname              motd                  profile               shells
apk                   hosts                 mtab                  profile.d             ssl
ca-certificates       init.d                network               protocols             sysctl.conf
ca-certificates.conf  inittab               nginx                 resolv.conf           sysctl.d
conf.d                issue                 opt                   secfixes.d            terminfo
crontabs              logrotate.d           os-release            securetty             udhcpd.conf
fstab                 modprobe.d            passwd                services
group                 modules               passwd-               shadow
group-                modules-load.d        periodic              shadow-
/etc # cd nginx
/etc/nginx # ls
conf.d          fastcgi_params  modules         scgi_params
fastcgi.conf    mime.types      nginx.conf      uwsgi_params
/etc/nginx # cd conf.d/
/etc/nginx/conf.d # ls
default.conf
/etc/nginx/conf.d # cat default.conf
server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

/etc/nginx/conf.d # exit
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE                 COMMAND                  CREATED         STATUS         PORTS     NAMES
02094f5c560b   nginx:1.23.2-alpine   "/docker-entrypoint.…"   4 minutes ago   Up 4 minutes   80/tcp    crazy_brahmagupta
84cc8a8f25e1   nginx:1.23.2-alpine   "/docker-entrypoint.…"   9 minutes ago   Up 6 minutes   80/tcp    bold_lovelace
sfjbs@vm001:~$ docker exec -it 84cc8a8f25e1 sh
/ # ls
bin                   etc                   mnt                   run                   tmp
dev                   home                  opt                   sbin                  usr
docker-entrypoint.d   lib                   proc                  srv                   var
docker-entrypoint.sh  media                 root                  sys
/ #
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS     NAMES
02094f5c560b   nginx:1.23.2-alpine   "/docker-entrypoint.…"   9 minutes ago    Up 9 minutes    80/tcp    crazy_brahmagupta
84cc8a8f25e1   nginx:1.23.2-alpine   "/docker-entrypoint.…"   14 minutes ago   Up 12 minutes   80/tcp    bold_lovelace
sfjbs@vm001:~$ docker rm 02094f5c560b 02094f5c560b
Error response from daemon: You cannot remove a running container 02094f5c560b6ddf609d633b59ae1a1a46e28a07534a9bffa82982258059064d. Stop the container before attempting removal or force remove
Error response from daemon: You cannot remove a running container 02094f5c560b6ddf609d633b59ae1a1a46e28a07534a9bffa82982258059064d. Stop the container before attempting removal or force remove
sfjbs@vm001:~$ docker stop 02094f5c560b
02094f5c560b
sfjbs@vm001:~$ docker ps -a
CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS                     PORTS     NAMES
02094f5c560b   nginx:1.23.2-alpine   "/docker-entrypoint.…"   11 minutes ago   Exited (0) 6 seconds ago             crazy_brahmagupta
84cc8a8f25e1   nginx:1.23.2-alpine   "/docker-entrypoint.…"   15 minutes ago   Up 13 minutes              80/tcp    bold_lovelace
sfjbs@vm001:~$ docker rm 02094f5c560b 02094f5c560b
02094f5c560b
Error response from daemon: removal of container 02094f5c560b is already in progress
sfjbs@vm001:~$ docker ps -a
CONTAINER ID   IMAGE                 COMMAND                  CREATED          STATUS          PORTS     NAMES
84cc8a8f25e1   nginx:1.23.2-alpine   "/docker-entrypoint.…"   16 minutes ago   Up 14 minutes   80/tcp    bold_lovelace
sfjbs@vm001:~$ docker rm 84cc8a8f25e1
Error response from daemon: You cannot remove a running container 84cc8a8f25e11ce43f7b2b6eb1cce1c31cb211aba008ab811023d44a96e3ea45. Stop the container before attempting removal or force remove
sfjbs@vm001:~$ docker rm 84cc8a8f25e1 -f
84cc8a8f25e1
sfjbs@vm001:~$ docker ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
sfjbs@vm001:~$ docker images
REPOSITORY   TAG             IMAGE ID       CREATED       SIZE
nginx        latest          76c69feac34e   5 days ago    142MB
nginx        1.23.2-alpine   b997307a58ab   11 days ago   23.6MB
sfjbs@vm001:~$ docker run -itd --name test1 b997307a58ab
511631a24948780049f9a1bad49cdc42a5628c72781e37751134f9d7d78d972e
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS     NAMES
511631a24948   b997307a58ab   "/docker-entrypoint.…"   5 seconds ago   Up 4 seconds   80/tcp    test1
sfjbs@vm001:~$ docker exec -it test1 sh
/ #
sfjbs@vm001:~$ docker exec -it test1 ls
bin                   media                 srv
dev                   mnt                   sys
docker-entrypoint.d   opt                   tmp
docker-entrypoint.sh  proc                  usr
etc                   root                  var
home                  run
lib                   sbin
sfjbs@vm001:~$ docker exec -it test1 'ls -al'
OCI runtime exec failed: exec failed: unable to start container process: exec: "ls -al": executable file not found in $PATH:unknown
sfjbs@vm001:~$ docker exec -it test1 'ls;pwd'
OCI runtime exec failed: exec failed: unable to start container process: exec: "ls;pwd": executable file not found in $PATH:unknown
sfjbs@vm001:~$ docker exec -it test1 'ls'
bin                   media                 srv
dev                   mnt                   sys
docker-entrypoint.d   opt                   tmp
docker-entrypoint.sh  proc                  usr
etc                   root                  var
home                  run
lib                   sbin
sfjbs@vm001:~$ docker exec -it test1 'pwd'
/
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES
511631a24948   b997307a58ab   "/docker-entrypoint.…"   12 minutes ago   Up 12 minutes   80/tcp    test1
sfjbs@vm001:~$ docker info test1
"docker info" accepts no arguments.
See 'docker info --help'.

Usage:  docker info [OPTIONS]

Display system-wide information
sfjbs@vm001:~$ docker inspect test1
[
    {
        "Id": "511631a24948780049f9a1bad49cdc42a5628c72781e37751134f9d7d78d972e",
        "Created": "2022-10-31T07:05:12.393793794Z",
        "Path": "/docker-entrypoint.sh",
        "Args": [
            "nginx",
            "-g",
            "daemon off;"
        ],
        "State": {
            "Status": "running",
            "Running": true,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 47328,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2022-10-31T07:05:12.833435111Z",
            "FinishedAt": "0001-01-01T00:00:00Z"
        },
        "Image": "sha256:b997307a58ab5b542359e567c9f77bb2a7cc3da1432baf6de2b3ae3e7b872070",
        "ResolvConfPath": "/var/lib/docker/containers/511631a24948780049f9a1bad49cdc42a5628c72781e37751134f9d7d78d972e/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/511631a24948780049f9a1bad49cdc42a5628c72781e37751134f9d7d78d972e/hostname",
        "HostsPath": "/var/lib/docker/containers/511631a24948780049f9a1bad49cdc42a5628c72781e37751134f9d7d78d972e/hosts",
        "LogPath": "/var/lib/docker/containers/511631a24948780049f9a1bad49cdc42a5628c72781e37751134f9d7d78d972e/511631a24948780049f9a1bad49cdc42a5628c72781e37751134f9d7d78d972e-json.log",
        "Name": "/test1",
        "RestartCount": 0,
        "Driver": "overlay2",
        "Platform": "linux",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "docker-default",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": null,
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "default",
            "PortBindings": {},
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "CapAdd": null,
            "CapDrop": null,
            "CgroupnsMode": "host",
            "Dns": [],
            "DnsOptions": [],
            "DnsSearch": [],
            "ExtraHosts": null,
            "GroupAdd": null,
            "IpcMode": "private",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "ConsoleSize": [
                0,
                0
            ],
            "Isolation": "",
            "CpuShares": 0,
            "Memory": 0,
            "NanoCpus": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": [],
            "BlkioDeviceReadBps": null,
            "BlkioDeviceWriteBps": null,
            "BlkioDeviceReadIOps": null,
            "BlkioDeviceWriteIOps": null,
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpuRealtimePeriod": 0,
            "CpuRealtimeRuntime": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": [],
            "DeviceCgroupRules": null,
            "DeviceRequests": null,
            "KernelMemory": 0,
            "KernelMemoryTCP": 0,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": null,
            "OomKillDisable": false,
            "PidsLimit": null,
            "Ulimits": null,
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0,
            "MaskedPaths": [
                "/proc/asound",
                "/proc/acpi",
                "/proc/kcore",
                "/proc/keys",
                "/proc/latency_stats",
                "/proc/timer_list",
                "/proc/timer_stats",
                "/proc/sched_debug",
                "/proc/scsi",
                "/sys/firmware"
            ],
            "ReadonlyPaths": [
                "/proc/bus",
                "/proc/fs",
                "/proc/irq",
                "/proc/sys",
                "/proc/sysrq-trigger"
            ]
        },
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/5af5713ac4ff2a6b92bb4bbcd581a5c1fe18b201370740270d42234fd7516c67-init/diff:/var/lib/docker/overlay2/1ebdc635f2f1a33c70c8acea2d67bbb23c01be602c8b02d08d650b28bc467a78/diff:/var/lib/docker/overlay2/b8473ffd17c9946f9f66cf2b3c99c2ba5a7343b5ec267a9e75b2ba471ebb977c/diff:/var/lib/docker/overlay2/148210e498682a3178158748d73172555b7026f3455dc77fdb9f2e77964f8f1a/diff:/var/lib/docker/overlay2/18c7629c30f6bdedf7f8a098bb8d1c876aa24e9ce92298beaf007a2e4805953d/diff:/var/lib/docker/overlay2/af1610834be7ac7db8329bb3cefb86d0f3f52c88dc9a928276ed75e6afafad27/diff:/var/lib/docker/overlay2/bb22ac823b7b8f5f617712cbbe23ad7692872b830521a39b281a77a27193d16c/diff",
                "MergedDir": "/var/lib/docker/overlay2/5af5713ac4ff2a6b92bb4bbcd581a5c1fe18b201370740270d42234fd7516c67/merged",
                "UpperDir": "/var/lib/docker/overlay2/5af5713ac4ff2a6b92bb4bbcd581a5c1fe18b201370740270d42234fd7516c67/diff",
                "WorkDir": "/var/lib/docker/overlay2/5af5713ac4ff2a6b92bb4bbcd581a5c1fe18b201370740270d42234fd7516c67/work"
            },
            "Name": "overlay2"
        },
        "Mounts": [],
        "Config": {
            "Hostname": "511631a24948",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": {
                "80/tcp": {}
            },
            "Tty": true,
            "OpenStdin": true,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "NGINX_VERSION=1.23.2",
                "NJS_VERSION=0.7.7",
                "PKG_RELEASE=1"
            ],
            "Cmd": [
                "nginx",
                "-g",
                "daemon off;"
            ],
            "Image": "b997307a58ab",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": [
                "/docker-entrypoint.sh"
            ],
            "OnBuild": null,
            "Labels": {
                "maintainer": "NGINX Docker Maintainers <docker-maint@nginx.com>"
            },
            "StopSignal": "SIGQUIT"
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "b61d1274e67e50bbb8ef084cf20782b1ffac4b1090a69508c59f8bd7a8243ad6",
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "Ports": {
                "80/tcp": null
            },
            "SandboxKey": "/var/run/docker/netns/b61d1274e67e",
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "90e2fc41bd6c9f05f6d5a821b76171eb56dbdd7d2cfbbf12f9658a1b1630196c",
            "Gateway": "172.17.0.1",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "172.17.0.2",
            "IPPrefixLen": 16,
            "IPv6Gateway": "",
            "MacAddress": "02:42:ac:11:00:02",
            "Networks": {
                "bridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,
                    "NetworkID": "ddc952f6aa8a4a9965cbe58f84be2d4b86077d652f87abf043af300691646204",
                    "EndpointID": "90e2fc41bd6c9f05f6d5a821b76171eb56dbdd7d2cfbbf12f9658a1b1630196c",
                    "Gateway": "172.17.0.1",
                    "IPAddress": "172.17.0.2",
                    "IPPrefixLen": 16,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": "02:42:ac:11:00:02",
                    "DriverOpts": null
                }
            }
        }
    }
]
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES
511631a24948   b997307a58ab   "/docker-entrypoint.…"   17 minutes ago   Up 17 minutes   80/tcp    test1
sfjbs@vm001:~$ docker rm test1 -f
test1
sfjbs@vm001:~$ docker run -itd --name test1 -p 8080:80   b997307a58ab
9c2c1413220952eb54f07622d3e44457be66a088ff5f776c4c131f64fbae69ad
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS NAMES
9c2c14132209   b997307a58ab   "/docker-entrypoint.…"   7 seconds ago   Up 6 seconds   0.0.0.0:8080->80/tcp, :::8080->80/tcp test1
sfjbs@vm001:~$ docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS   NAMES
9c2c14132209   b997307a58ab   "/docker-entrypoint.…"   14 seconds ago   Up 13 seconds   0.0.0.0:8080->80/tcp, :::8080->80/tcp   test1
sfjbs@vm001:~$ sudo ss -tulpn
Netid   State    Recv-Q   Send-Q     Local Address:Port     Peer Address:Port   Process
udp     UNCONN   0        0                0.0.0.0:6784          0.0.0.0:*
udp     UNCONN   0        0          127.0.0.53%lo:53            0.0.0.0:*       users:(("systemd-resolve",pid=589,fd=12))
udp     UNCONN   0        0          10.0.0.4%eth0:68            0.0.0.0:*       users:(("systemd-network",pid=586,fd=19))
udp     UNCONN   0        0              127.0.0.1:323           0.0.0.0:*       users:(("chronyd",pid=811,fd=6))
udp     UNCONN   0        0                   [::]:6784             [::]:*
udp     UNCONN   0        0                  [::1]:323              [::]:*       users:(("chronyd",pid=811,fd=7))
tcp     LISTEN   0        4096             0.0.0.0:8080          0.0.0.0:*       users:(("docker-proxy",pid=47714,fd=4))
tcp     LISTEN   0        4096       127.0.0.53%lo:53            0.0.0.0:*       users:(("systemd-resolve",pid=589,fd=13))
tcp     LISTEN   0        128              0.0.0.0:22            0.0.0.0:*       users:(("sshd",pid=1635,fd=3))
tcp     LISTEN   0        4096                [::]:8080             [::]:*       users:(("docker-proxy",pid=47720,fd=4))
tcp     LISTEN   0        128                 [::]:22               [::]:*       users:(("sshd",pid=1635,fd=4))
sfjbs@vm001:~$ sudo ss -tlpn
State     Recv-Q    Send-Q       Local Address:Port       Peer Address:Port    Process
LISTEN    0         4096               0.0.0.0:8080            0.0.0.0:*        users:(("docker-proxy",pid=47714,fd=4))
LISTEN    0         4096         127.0.0.53%lo:53              0.0.0.0:*        users:(("systemd-resolve",pid=589,fd=13))
LISTEN    0         128                0.0.0.0:22              0.0.0.0:*        users:(("sshd",pid=1635,fd=3))
LISTEN    0         4096                  [::]:8080               [::]:*        users:(("docker-proxy",pid=47720,fd=4))
LISTEN    0         128                   [::]:22                 [::]:*        users:(("sshd",pid=1635,fd=4))
sfjbs@vm001:~$ docker run -itd --name test2 -p 8081:80   b997307a58ab
d3d0655fd8a3865ebd1a97e36367bb689834ecce808f3c1a77f73c822c865585
sfjbs@vm001:~$ docker ps -a
CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS
 NAMES
d3d0655fd8a3   b997307a58ab   "/docker-entrypoint.…"   4 seconds ago   Up 3 seconds   0.0.0.0:8081->80/tcp, :::8081->80/tcp test2
9c2c14132209   b997307a58ab   "/docker-entrypoint.…"   4 minutes ago   Up 4 minutes   0.0.0.0:8080->80/tcp, :::8080->80/tcp test1
sfjbs@vm001:~$ sudo ss -tlpn
State     Recv-Q    Send-Q       Local Address:Port       Peer Address:Port    Process
LISTEN    0         4096               0.0.0.0:8080            0.0.0.0:*        users:(("docker-proxy",pid=47714,fd=4))
LISTEN    0         4096               0.0.0.0:8081            0.0.0.0:*        users:(("docker-proxy",pid=47880,fd=4))
LISTEN    0         4096         127.0.0.53%lo:53              0.0.0.0:*        users:(("systemd-resolve",pid=589,fd=13))
LISTEN    0         128                0.0.0.0:22              0.0.0.0:*        users:(("sshd",pid=1635,fd=3))
LISTEN    0         4096                  [::]:8080               [::]:*        users:(("docker-proxy",pid=47720,fd=4))
LISTEN    0         4096                  [::]:8081               [::]:*        users:(("docker-proxy",pid=47886,fd=4))
LISTEN    0         128                   [::]:22                 [::]:*        users:(("sshd",pid=1635,fd=4))
sfjbs@vm001:~$ curl http://localhost
curl: (7) Failed to connect to localhost port 80: Connection refused
sfjbs@vm001:~$ curl http://localhost:8080
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
sfjbs@vm001:~$ curl http://localhost:8081
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
sfjbs@vm001:~$ curl http://localhost:8082
curl: (7) Failed to connect to localhost port 8082: Connection refused
sfjbs@vm001:~$ curl http://localhost:8081
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
sfjbs@vm001:~$ mkdir Dockerfiles
sfjbs@vm001:~$ cd Dockerfiles/
sfjbs@vm001:~/Dockerfiles$ ls
sfjbs@vm001:~/Dockerfiles$ mkdir lab1
sfjbs@vm001:~/Dockerfiles$ cd lab1/
sfjbs@vm001:~/Dockerfiles/lab1$ ls
sfjbs@vm001:~/Dockerfiles/lab1$ vim Dockerfile
sfjbs@vm001:~/Dockerfiles/lab1$ docker images
REPOSITORY   TAG             IMAGE ID       CREATED       SIZE
nginx        latest          76c69feac34e   5 days ago    142MB
nginx        1.23.2-alpine   b997307a58ab   11 days ago   23.6MB
sfjbs@vm001:~/Dockerfiles/lab1$ ls
Dockerfile
sfjbs@vm001:~/Dockerfiles/lab1$ vim Dockerfile
sfjbs@vm001:~/Dockerfiles/lab1$ docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS
   NAMES
d3d0655fd8a3   b997307a58ab   "/docker-entrypoint.…"   10 minutes ago   Up 10 minutes   0.0.0.0:8081->80/tcp, :::8081->80/tcp   test2
9c2c14132209   b997307a58ab   "/docker-entrypoint.…"   14 minutes ago   Up 14 minutes   0.0.0.0:8080->80/tcp, :::8080->80/tcp   test1
sfjbs@vm001:~/Dockerfiles/lab1$ docker exec -it test1 sh
/ # cd /etc/
/etc # ls
alpine-release        hostname              motd                  profile               shells
apk                   hosts                 mtab                  profile.d             ssl
ca-certificates       init.d                network               protocols             sysctl.conf
ca-certificates.conf  inittab               nginx                 resolv.conf           sysctl.d
conf.d                issue                 opt                   secfixes.d            terminfo
crontabs              logrotate.d           os-release            securetty             udhcpd.conf
fstab                 modprobe.d            passwd                services
group                 modules               passwd-               shadow
group-                modules-load.d        periodic              shadow-
/etc # cd nginx
/etc/nginx # cd conf.d
/etc/nginx/conf.d # ls
default.conf
/etc/nginx/conf.d # cat default.conf
server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

/etc/nginx/conf.d #
sfjbs@vm001:~/Dockerfiles/lab1$ vim Dockerfile
sfjbs@vm001:~/Dockerfiles/lab1$ mkdir src
sfjbs@vm001:~/Dockerfiles/lab1$ vim src/index.html
sfjbs@vm001:~/Dockerfiles/lab1$ ls
Dockerfile  src
sfjbs@vm001:~/Dockerfiles/lab1$ vim Dockerfile
sfjbs@vm001:~/Dockerfiles/lab1$ docker build -t mynginx:v1 .
Sending build context to Docker daemon  3.584kB
Step 1/2 : FROM nginx:1.23.2-alpine
 ---> b997307a58ab
Step 2/2 : ADD  src/index.html /usr/share/nginx/html/
 ---> 58f31da51d22
Successfully built 58f31da51d22
Successfully tagged mynginx:v1
sfjbs@vm001:~/Dockerfiles/lab1$ docker images
REPOSITORY   TAG             IMAGE ID       CREATED          SIZE
mynginx      v1              58f31da51d22   30 seconds ago   23.6MB
nginx        latest          76c69feac34e   5 days ago       142MB
nginx        1.23.2-alpine   b997307a58ab   11 days ago      23.6MB
sfjbs@vm001:~/Dockerfiles/lab1$ docker run -itd --name test3 -p 8083:80 58f31da51d22
8c1586901ff32f5539c28c7f600a8548d63d1407156ffdba2af3dd790e25ba6a
sfjbs@vm001:~/Dockerfiles/lab1$ docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS
   NAMES
8c1586901ff3   58f31da51d22   "/docker-entrypoint.…"   3 seconds ago    Up 2 seconds    0.0.0.0:8083->80/tcp, :::8083->80/tcp   test3
d3d0655fd8a3   b997307a58ab   "/docker-entrypoint.…"   15 minutes ago   Up 15 minutes   0.0.0.0:8081->80/tcp, :::8081->80/tcp   test2
9c2c14132209   b997307a58ab   "/docker-entrypoint.…"   19 minutes ago   Up 19 minutes   0.0.0.0:8080->80/tcp, :::8080->80/tcp   test1
sfjbs@vm001:~/Dockerfiles/lab1$ curl https://localhost:8083
curl: (35) error:1408F10B:SSL routines:ssl3_get_record:wrong version number
sfjbs@vm001:~/Dockerfiles/lab1$ curl http://localhost:8083
<h1>Hello from TCS</h1>
sfjbs@vm001:~/Dockerfiles/lab1$ ls
Dockerfile  src
sfjbs@vm001:~/Dockerfiles/lab1$ cat Dockerfile
FROM nginx:1.23.2-alpine
ADD  src/index.html /usr/share/nginx/html/
sfjbs@vm001:~/Dockerfiles/lab1$ docker ps -a
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS
   NAMES
8c1586901ff3   58f31da51d22   "/docker-entrypoint.…"   5 minutes ago    Up 5 minutes    0.0.0.0:8083->80/tcp, :::8083->80/tcp   test3
d3d0655fd8a3   b997307a58ab   "/docker-entrypoint.…"   21 minutes ago   Up 21 minutes   0.0.0.0:8081->80/tcp, :::8081->80/tcp   test2
9c2c14132209   b997307a58ab   "/docker-entrypoint.…"   25 minutes ago   Up 25 minutes   0.0.0.0:8080->80/tcp, :::8080->80/tcp   test1
sfjbs@vm001:~/Dockerfiles/lab1$ docker build --help

Usage:  docker build [OPTIONS] PATH | URL | -

Build an image from a Dockerfile

Options:
      --add-host list           Add a custom host-to-IP mapping (host:ip)
      --build-arg list          Set build-time variables
      --cache-from strings      Images to consider as cache sources
      --cgroup-parent string    Optional parent cgroup for the container
      --compress                Compress the build context using gzip
      --cpu-period int          Limit the CPU CFS (Completely Fair Scheduler) period
      --cpu-quota int           Limit the CPU CFS (Completely Fair Scheduler) quota
  -c, --cpu-shares int          CPU shares (relative weight)
      --cpuset-cpus string      CPUs in which to allow execution (0-3, 0,1)
      --cpuset-mems string      MEMs in which to allow execution (0-3, 0,1)
      --disable-content-trust   Skip image verification (default true)
  -f, --file string             Name of the Dockerfile (Default is 'PATH/Dockerfile')
      --force-rm                Always remove intermediate containers
      --iidfile string          Write the image ID to the file
      --isolation string        Container isolation technology
      --label list              Set metadata for an image
  -m, --memory bytes            Memory limit
      --memory-swap bytes       Swap limit equal to memory plus swap: '-1' to enable unlimited swap
      --network string          Set the networking mode for the RUN instructions during build (default "default")
      --no-cache                Do not use cache when building the image
      --pull                    Always attempt to pull a newer version of the image
  -q, --quiet                   Suppress the build output and print image ID on success
      --rm                      Remove intermediate containers after a successful build (default true)
      --security-opt strings    Security options
      --shm-size bytes          Size of /dev/shm
  -t, --tag list                Name and optionally a tag in the 'name:tag' format
      --target string           Set the target build stage to build.
      --ulimit ulimit           Ulimit options (default [])
sfjbs@vm001:~/Dockerfiles/lab1$ docker build -t nginx:v2 -f Dockerfile
"docker build" requires exactly 1 argument.
See 'docker build --help'.

Usage:  docker build [OPTIONS] PATH | URL | -

Build an image from a Dockerfile
sfjbs@vm001:~/Dockerfiles/lab1$ docker build -t nginx:v2 -f ./Dockerfile
"docker build" requires exactly 1 argument.
See 'docker build --help'.

Usage:  docker build [OPTIONS] PATH | URL | -

Build an image from a Dockerfile
sfjbs@vm001:~/Dockerfiles/lab1$ ls
Dockerfile  src
sfjbs@vm001:~/Dockerfiles/lab1$ mv Dockerfile vijay
sfjbs@vm001:~/Dockerfiles/lab1$ docker build -t nginx:v2 -f ./vijay
"docker build" requires exactly 1 argument.
See 'docker build --help'.

Usage:  docker build [OPTIONS] PATH | URL | -

Build an image from a Dockerfile
sfjbs@vm001:~/Dockerfiles/lab1$ docker build -t nginx:v2 -f vijay .
Sending build context to Docker daemon  3.584kB
Step 1/2 : FROM nginx:1.23.2-alpine
 ---> b997307a58ab
Step 2/2 : ADD  src/index.html /usr/share/nginx/html/
 ---> Using cache
 ---> 58f31da51d22
Successfully built 58f31da51d22
Successfully tagged nginx:v2
sfjbs@vm001:~/Dockerfiles/lab1$
